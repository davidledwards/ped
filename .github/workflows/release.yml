name: Release

on:
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: aarch64-apple-darwin

      - name: Create release
        run: |
          VERSION=$(cargo metadata --no-deps --format-version 1 | jq -r ".packages[0].version")
          gh release create v${VERSION} --title ${VERSION} --generate-notes

  build-and-upload:
    needs: create-release
    strategy:
      matrix:
        include:
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: i686-unknown-linux-gnu

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Install gcc-multilib
        if: matrix.target == 'i686-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install gcc-multilib

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: ${{ matrix.target }}

      - name: Set environment variables
        run: |
          # Extracts tag of just created release and derives version number.
          TAG=$(gh release view --json tagName --jq ".tagName")
          echo "TAG=${TAG}" >> $GITHUB_ENV
          echo "VERSION=${TAG:1}" >> $GITHUB_ENV

      - name: Build ${{ matrix.target }}
        run: |
          cargo build --release --target ${{ matrix.target }}
          cargo test --release --target ${{ matrix.target }} --no-fail-fast

      - name: Upload artifacts for ${{ matrix.target }}
        run: |
          BIN_DIR=target/${{ matrix.target }}/release
          TAR_FILE=${BIN_DIR}/ped-${{ env.VERSION }}-${{ matrix.target }}.tar.gz
          SHA_FILE=${TAR_FILE}.sha256

          # Creates tar file and SHA hash.
          tar -czf ${TAR_FILE} -C ${BIN_DIR} ped
          shasum -a 256 ${TAR_FILE} > ${SHA_FILE}

          # Uploads artifacts to release.
          gh release upload --clobber ${{ env.TAG }} ${TAR_FILE} ${SHA_FILE}
